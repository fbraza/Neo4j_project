### M. Baton we suggest you that while testing the query you should follow our report.
### The notebook sould provide with all necessary code to download missing packages.
### A side note here, if possible create an independent virtual environment and just
### run the cell containing all the packages to install. Finally run this in the classical
### notebook env and not jupyter lab that has a different backend rendering for javascript.

### Finally you will need to install the APOC plugin in your database server.
### You will see that we decided to really fragmented our queries based on our
### conversation about the Eager and on more reading in our sides reagarding this
### and the PROFILE of our queries. We reach teh conclusion that from a performance 
### point of view having short straightfoward and stepwise queries is at the core 
### of optimization with Neo4J. We think we manage to fulfill the written expectations
### for the exam and stay available for any more details you would need from us.

### Best regards
### Sebastien and Faouzi

### Query 01
LOAD CSV WITH HEADERS FROM "file:///curated_variant_disease_associations.tsv" AS line FIELDTERMINATOR "\t"
RETURN line LIMIT 2

### Query 02
LOAD CSV WITH HEADERS FROM "file:///variant_to_gene_mappings.tsv" AS line FIELDTERMINATOR "\t"
RETURN line LIMIT 2

### Query 03
LOAD CSV WITH HEADERS FROM "file:///disease_mappings_to_attributes.tsv" AS line FIELDTERMINATOR "\t"
RETURN line LIMIT 2

### Query 04
LOAD CSV WITH HEADERS FROM "file:///curated_variant_disease_associations.tsv" AS line FIELDTERMINATOR "\t"
RETURN DISTINCT line.chromosome AS chromosome_name
ORDER BY toInteger(line.chromosome)

### Query 05
CREATE CONSTRAINT ON (v:Variant) ASSERT v.variantId IS UNIQUE

### Query 06
CREATE CONSTRAINT ON (c:Chromosome) ASSERT c.name IS UNIQUE

### Query 07
LOAD CSV WITH HEADERS FROM "file:///curated_variant_disease_associations.tsv" AS line FIELDTERMINATOR "\t"
MERGE (v:Variant {variantId: line.snpId})
MERGE (c:Chromosome {name: line.chromosome})

### Query 08
LOAD CSV WITH HEADERS FROM "file:///variant_to_gene_mappings.tsv" AS line FIELDTERMINATOR "\t"
MATCH (v:Variant) WHERE v.variantId = line.snpId
SET v.variantOf = line.geneSymbol

### Query 09
MATCH (v:Variant)
WHERE v.variantOf is NULL
RETURN COUNT(v)

### Query 10
MATCH (v:Variant) 
RETURN COUNT(v)

### Query 11
MATCH (v:Variant) 
WHERE v.variantOf is NULL
DELETE v

### Query 12
MATCH (v:Variant) 
RETURN COUNT(v)

### Query 13
LOAD CSV WITH HEADERS FROM "file:///curated_variant_disease_associations.tsv"AS line FIELDTERMINATOR "\t"
MATCH (v:Variant {variantId: line.snpId})
MATCH (c:Chromosome {name: line.chromosome})
MERGE (c)<-[:LOCATED_IN]-(v)

### Query 14
CREATE CONSTRAINT ON (d:Disease) ASSERT d.diseaseId IS UNIQUE

### Query 15
CREATE CONSTRAINT ON (p:Phenotype) ASSERT p.phenotypeId IS UNIQUE

### Query 16
LOAD CSV WITH HEADERS FROM "file:///disease_mappings_to_attributes.tsv" AS line FIELDTERMINATOR "\t"
RETURN COUNT(DISTINCT line.name) AS diseaseOrPhenotypeName, 
       COUNT(DISTINCT line.diseaseId) AS diseaseOrPhenotypeId, 
       COUNT(DISTINCT line.diseaseClassNameMSH) AS diseaseOrPhenotypeGroup,
       COUNT(DISTINCT line.type) AS Type

### Query 17
LOAD CSV WITH HEADERS FROM "file:///disease_mappings_to_attributes.tsv" AS line FIELDTERMINATOR "\t"
RETURN DISTINCT line.type AS Type

### Query 18
LOAD CSV WITH HEADERS FROM "file:///disease_mappings_to_attributes.tsv" AS line FIELDTERMINATOR "\t"
RETURN DISTINCT line.diseaseClassNameMSH as Groups LIMIT 50

### Query 19
LOAD CSV WITH HEADERS FROM "file:///disease_mappings_to_attributes.tsv" AS line FIELDTERMINATOR "\t"
WITH line 
WHERE line.type = "group"
RETURN COUNT(line) AS Number_of_entries_with_group_type

### Query 20
LOAD CSV WITH HEADERS FROM "file:///disease_mappings_to_attributes.tsv" AS line FIELDTERMINATOR "\t"
FOREACH(uselessVar IN CASE WHEN line.type = "disease" THEN [1] ELSE [] END | 
    MERGE (d:Disease {diseaseId: line.diseaseId, diseaseName: line.name})
)

FOREACH(uselessVar IN CASE WHEN line.type = "phenotype" THEN [1] ELSE [] END | 
    MERGE (p:Phenotype {phenotypeId: line.diseaseId, phenotypeName: line.name})
)

### Query 21
LOAD CSV WITH HEADERS FROM "file:///disease_mappings_to_attributes.tsv" AS line FIELDTERMINATOR "\t"
MATCH (d:Disease {diseaseId: line.diseaseId})
    WITH split(line.diseaseClassNameMSH, "; ") AS splitted_groups, d
    UNWIND splitted_groups as splitted_group
    WITH apoc.agg.nth(splitted_group, -1) AS x, d
    SET d.diseaseGroup = x

### Query 22
MATCH (d:Disease)
WHERE d.diseaseGroup IS NULL
SET d.diseaseGroup = "Not determined"

### Query 23
MATCH (d:Disease)
RETURN DISTINCT d.diseaseGroup AS disease_group

### Query 24
LOAD CSV WITH HEADERS FROM "file:///curated_variant_disease_associations.tsv" AS line FIELDTERMINATOR "\t"
MATCH (d:Disease {diseaseId: line.diseaseId})
MATCH (v:Variant {variantId: line.snpId})
MERGE (v)-[:ASSOCIATED_WITH]->(d)

### Query 25
LOAD CSV WITH HEADERS FROM "file:///curated_variant_disease_associations.tsv" AS line FIELDTERMINATOR "\t"
MATCH (p:Phenotype {phenotypeId: line.diseaseId})
MATCH (v:Variant {variantId: line.snpId})
MERGE (v)-[:IMPACTS_on]->(p)

### Query 26
MATCH (c:Chromosome)<-[:LOCATED_IN]-(v:Variant) WHERE c.name = "X"
WITH COUNT(v) AS x_variants_count, v.variantOf AS x_genes
RETURN x_variants_count, x_genes
ORDER BY x_variants_count DESC

### Query 27
MATCH (c:Chromosome)<-[:LOCATED_IN]-(v:Variant) WHERE c.name = "X"
WITH COUNT(v) AS x_variants_count, v.variantOf AS x_genes
RETURN x_variants_count, x_genes
ORDER BY x_variants_count DESC LIMIT 5

### Query 28
MATCH (c:Chromosome)<-[:LOCATED_IN]-(v:Variant) WHERE c.name = "Y"
WITH COUNT(v) AS y_variants_count, v.variantOf AS y_genes
RETURN y_variants_count, y_genes
ORDER BY y_variants_count DESC LIMIT 5

### Query 29
MATCH (c:Chromosome)<-[:LOCATED_IN]-(v:Variant) WHERE c.name = "MT"
WITH COUNT(v) AS mt_variants_count, v.variantOf AS mt_genes
RETURN mt_variants_count, mt_genes
ORDER BY mt_variants_count DESC LIMIT 5

### Query 30
MATCH (v:Variant {variantOf: "DMD"})-[:ASSOCIATED_WITH]->(d:Disease)
RETURN COUNT(d.diseaseName) AS numberOfDmdVariants, d.diseaseName AS dmdLinkedDiseases
ORDER BY numberOfDmdVariants DESC LIMIT 3

### Query 31
MATCH (v:Variant {variantOf: "SRY"})-[:ASSOCIATED_WITH]->(d:Disease)
RETURN COUNT(d.diseaseName) AS numberOfSryVariants, d.diseaseName AS sryLinkedDiseases
ORDER BY numberOfSryVariants DESC LIMIT 3

### Query 32
MATCH (v:Variant {variantOf: "ND6"})-[:ASSOCIATED_WITH]->(d:Disease)
RETURN COUNT(d.diseaseName) AS numberOfNd6Variants, d.diseaseName AS nd6LinkedDiseases
ORDER BY numberOfNd6Variants DESC LIMIT 3

### Query 33
MATCH (v:Variant)-[:ASSOCIATED_WITH]->(d:Disease)
WITH COUNT(v) AS numberOfVariants, d AS disease
SET disease.rank = numberOfVariants

### Query 34
MATCH (v:Variant)-[:IMPACTS_on]->(p:Phenotype)
WITH COUNT(v) AS numberOfVariants, p AS phenotype
SET phenotype.rank = numberOfVariants

### Query 35
MATCH (v:Variant)-[:ASSOCIATED_WITH]->(d:Disease)
RETURN COUNT(v) AS number_of_variants, v.variantOf AS genes, d.diseaseName AS disease_name
ORDER BY number_of_variants DESC LIMIT 10

### Query 36
MATCH (v:Variant)-[:IMPACTS_on]->(p:Phenotype)
RETURN COUNT(v) AS number_of_variants, v.variantOf AS genes, p.phenotypeName AS observed_phentoype
ORDER BY number_of_variants DESC LIMIT 10

### Query 37
MATCH (v:Variant )-[:ASSOCIATED_WITH]->(d:Disease)
RETURN COUNT(DISTINCT d) AS number_of_disease, v.variantOf AS genes, d.diseaseGroup AS disease_class
ORDER BY number_of_disease DESC LIMIT 20

